/*
===============================================================================
 Name        : ROV_Controller_Prototype.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#include "board.h"
#include "Arduino_Header.h"
#include "SCT.c"
#include "UART.c"

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

#define redT		1
#define orangeT		2
#define whiteT		3
#define greenT		4
#define lightBlueT	5
#define darkBlueT	6

#define FRT	redT
#define FLT	orangeT
#define BRT	whiteT
#define BLT	greenT
#define FVT	lightBlueT
#define BVT	darkBlueT

#define SCT_PWM_RATE   50		/* PWM frequency 50Hz */

/* Systick timer tick rate, to change duty cycle */
//#define TICKRATE_HZ     10000		/* 10 ms Tick rate */

//Board LED.
#define REDLED		0
#define GREENLED	1
#define BLUELED		2

#define SCT_PWM		LPC_SCT

//Joystick value indexes.
#define B0	0
#define B1	1
#define B2	2
#define B3	3
#define LX	4
#define LY	5
#define RX	6
#define RY	7

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

volatile uint8_t byteCounter = 0;
volatile int32_t stick[8];
volatile int32_t thruster[6];

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/*****************************************************************************
 * Public functions
 ****************************************************************************/

//static void UART0_IRQHandler(void)
//{
//	/* Want to handle any errors? Do it here. */
//
//	/* Use default ring buffer handler. Override this with your own
//	   code if you need more capability. */
////	Chip_UART_IRQRBHandler(LPC_USART, &thruster[byteCounter], NULL);
//	//Get joystick data from Pi.
//	stick[byteCounter] = (int32_t) Board_UARTGetChar()<<8;
//	stick[byteCounter] = stick[byteCounter]<<8;
//
//	//Increment thruster
//	byteCounter++;
//
//	if (byteCounter >= 8) {
//		byteCounter = 0;
//	}
//}

void HardFault_Handler(void) {

	Board_LED_Set(REDLED, true);

	while(1) {

	}
}

void IntDefaultHandler(void) {

	Board_LED_Set(BLUELED, true);

	while(1) {

	}
}

/* Example entry point */
int main(void) {

	/* Generic Initialization */
	SystemCoreClockUpdate();
	Board_Init();

	Board_LED_Set(REDLED, false);

	/* Initialize the SCT as PWM and set frequency */
	Chip_SCTPWM_Init(SCT_PWM);
	Chip_SCTPWM_SetRate(SCT_PWM, SCT_PWM_RATE);

	/* Setup Board specific output pin for SCT. */
	app_setup_pin();

	//Initialize the UART.
	Init_UART_PinMux();

	/* Setup UART */
	Chip_UART_Init(LPC_USART);
	Chip_UART_ConfigData(LPC_USART, UART_CFG_DATALEN_8 | UART_CFG_PARITY_NONE | UART_CFG_STOPLEN_1);
	Chip_Clock_SetUSARTNBaseClockRate((115200 * 16), true);
	Chip_UART_SetBaud(LPC_USART, UART_TEST_DEFAULT_BAUDRATE);
	Chip_UART_Enable(LPC_USART);
	Chip_UART_TXEnable(LPC_USART);

	//Enable UART interrupt.
	Chip_UART_IntEnable(LPC_USART, UART_INTEN_RXRDY);
	NVIC_EnableIRQ(LPC_IRQNUM);

	/* Use SCT0_OUT1 pin */
	Chip_SCTPWM_SetOutPin(SCT_PWM, FRT, FRT - 1);
	Chip_SCTPWM_SetOutPin(SCT_PWM, FLT, FLT - 1);
	Chip_SCTPWM_SetOutPin(SCT_PWM, BRT, BRT - 1);
	Chip_SCTPWM_SetOutPin(SCT_PWM, BLT, BLT - 1);
	Chip_SCTPWM_SetOutPin(SCT_PWM, FVT, FVT - 1);
	Chip_SCTPWM_SetOutPin(SCT_PWM, BVT, BVT - 1);

	/* Start with 1500us pulse width */
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, FRT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, FLT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, BRT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, BLT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, FVT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_SetDutyCycle(SCT_PWM, BVT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * 1500) / 20000));
	Chip_SCTPWM_Start(SCT_PWM);

	sendUART("Hello to Raspberry Pi from LPC824.\r\n\r\nReady to run.\r\n\r\n");

//	while ((stick[B0] == 0) && (stick[B1] == 0) && (stick[B2] == 0) && (stick[B3] == 0));

	while (1) {

		//convert data.
		thruster[FRT] = 1500 + (stick[RY] - stick[RX] - stick[LX]) * 200 / (256 * 3);
		thruster[FLT] = 1500 + (stick[RY] + stick[RX] + stick[LX]) * 200 / (256 * 3);
		thruster[BRT] = 1500 + (stick[RY] + stick[RX] - stick[LX]) * 200 / (256 * 3);
		thruster[BLT] = 1500 + (stick[RY] - stick[RX] + stick[LX]) * 200 / (256 * 3);
		thruster[FVT] = 1500 + stick[LY] * 200 / 256;
		thruster[BVT] = 1500 + stick[LY] * 200 / 256;

		//Update ESCs.
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, FRT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[redT]) / 20000));
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, FLT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[orangeT]) / 20000));
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, BRT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[whiteT]) / 20000));
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, BLT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[greenT]) / 20000));
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, FVT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[lightBlueT]) / 20000));
		Chip_SCTPWM_SetDutyCycle(SCT_PWM, BVT, ((Chip_SCTPWM_GetTicksPerCycle(SCT_PWM) * thruster[darkBlueT]) / 20000));

		//Wait for interrupt.
		__WFI();
	}
}
